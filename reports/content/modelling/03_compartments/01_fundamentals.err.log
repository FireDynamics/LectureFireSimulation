Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
list_q = ['PRESSURE', 'BACKGROUND PRESSURE']

it = sim.slices[0].get_nearest_timestep(250)

for q in list_q:
    slice = sim.slices.filter_by_quantity(q)[0]
    
#     print(slice)
    ### fds / fdsreader BUG workaround BEGIN
    ### Issue due to SLCF located at MESH boundary
    to_del = []
    for s in slice:
        if s.extent._extents[1][0] > 0:
            to_del.append(s.mesh)
    for m in to_del:
        del slice._subslices[m]
        
    extent = (slice.extent[0][0], slice.extent[0][1], 
              slice.extent[2][0], slice.extent[2][1])
#     print(extent)
    ### fds / fdsreader BUG workaround END
    
    slice_data = slice.to_global()
    
    if np.min(slice_data[it]) < 0:
        v_abs_max = np.max(np.abs(slice_data[it]))
        vmin = -v_abs_max
        vmax = v_abs_max
    else:
        vmin = np.min(slice_data[it])
        vmax = np.max(slice_data[it])
    
    plt.imshow(slice_data[it].T,
               vmin = vmin, vmax = vmax,
               origin='lower', 
               extent=extent,
               cmap='seismic')
    q = slice.quantity.quantity
    u = slice.quantity.unit
    plt.colorbar(label=f"{q} / {u}")
    plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 3[0m
[1;32m      1[0m list_q [38;5;241m=[39m [[38;5;124m'[39m[38;5;124mPRESSURE[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mBACKGROUND PRESSURE[39m[38;5;124m'[39m]
[0;32m----> 3[0m it [38;5;241m=[39m [43msim[49m[38;5;241m.[39mslices[[38;5;241m0[39m][38;5;241m.[39mget_nearest_timestep([38;5;241m250[39m)
[1;32m      5[0m [38;5;28;01mfor[39;00m q [38;5;129;01min[39;00m list_q:
[1;32m      6[0m     [38;5;28mslice[39m [38;5;241m=[39m sim[38;5;241m.[39mslices[38;5;241m.[39mfilter_by_quantity(q)[[38;5;241m0[39m]

[0;31mNameError[0m: name 'sim' is not defined
NameError: name 'sim' is not defined

